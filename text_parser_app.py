import streamlit as st
import pandas as pd
import re
from collections import Counter
from io import StringIO

st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫", layout="wide")
st.title("üìã –ê–Ω–∞–ª—ñ–∑ –∞–≤–∞—Ä—ñ–π–Ω–∏—Ö –∑–∞—è–≤–æ–∫")

st.markdown("""
### üîΩ –í—Å—Ç–∞–≤ —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ (Ctrl+V –∑ –µ–∫—Ä–∞–Ω—É)
*–°–∫–æ–ø—ñ—é–π –≤—Å—é —Ç–∞–±–ª–∏—Ü—é –∑–∞—è–≤–æ–∫ –∑ –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+C) —Ç–∞ –≤—Å—Ç–∞–≤ —Å—é–¥–∏:* 
""")

raw_text = st.text_area("–í—Å—Ç–∞–≤ —Å—é–¥–∏ —Ç–µ–∫—Å—Ç", height=400)

if st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏") and raw_text:
    
    # –†–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —Ä—è–¥–∫–∏ —Ç–∞ –ø—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥
    lines = [line.strip() for line in raw_text.splitlines() if line.strip() and 'A-' in line]
    records = []

    for line in lines:
        try:
            id_match = re.search(r'(A-\d{7})', line)
            id_ = id_match.group(1) if id_match else ""
            status = "–í–∏–∫–æ–Ω–∞–Ω–æ" if "–í–∏–∫–æ–Ω–∞–Ω–æ" in line else ("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" if "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" in line else ("–í—ñ–¥–º—ñ–Ω–µ–Ω–æ" if "–í—ñ–¥–º—ñ–Ω–µ–Ω–æ" in line else "–Ü–Ω—à–µ"))
            description = re.findall(r'\t([^\t]+)\t', line)
            
            records.append({
                "ID": id_,
                "–°—Ç–∞—Ç—É—Å": status,
                "–û–ø–∏—Å": description[-5] if len(description) >= 5 else "",
                "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è": description[-2] if len(description) >= 2 else "",
                "–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å": description[-1] if len(description) >= 1 else "",
            })
        except Exception as e:
            st.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä—è–¥–∫–∞: {line}")

    df = pd.DataFrame(records)

    st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞—è–≤–æ–∫")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("–í–∏–∫–æ–Ω–∞–Ω–æ", (df['–°—Ç–∞—Ç—É—Å'] == "–í–∏–∫–æ–Ω–∞–Ω–æ").sum())
    with col2:
        st.metric("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ", (df['–°—Ç–∞—Ç—É—Å'] == "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ").sum())
    with col3:
        st.metric("–í—ñ–¥–º—ñ–Ω–µ–Ω–æ", (df['–°—Ç–∞—Ç—É—Å'] == "–í—ñ–¥–º—ñ–Ω–µ–Ω–æ").sum())

    # –¢–û–ü-5
    def top_counts(series):
        return pd.DataFrame(Counter(series).most_common(5), columns=['–ó–Ω–∞—á–µ–Ω–Ω—è', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'])

    st.markdown("### üìå –¢–û–ü –ø—Ä–æ–±–ª–µ–º / –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è / –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.write("**–¢–û–ü –ø—Ä–æ–±–ª–µ–º**")
        st.dataframe(top_counts(df['–û–ø–∏—Å']))

    with col2:
        st.write("**–¢–û–ü –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è**")
        st.dataframe(top_counts(df['–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è']))

    with col3:
        st.write("**–¢–û–ü –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤**")
        st.dataframe(top_counts(df['–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å']))

    st.markdown("### üìÑ –ü–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è")
    st.dataframe(df, use_container_width=True)

    # –ï–∫—Å–ø–æ—Ä—Ç
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
        data=csv,
        file_name='analyzed_zayavky.csv',
        mime='text/csv'
    )
